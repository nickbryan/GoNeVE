// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/network/protocol/service/player.proto

package service

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	domain "github.com/nickbryan/GoNeVE/pkg/network/grpc/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("pkg/network/protocol/service/player.proto", fileDescriptor_f6d2214335f01b61)
}

var fileDescriptor_f6d2214335f01b61 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xcf, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x05, 0x60, 0x7a, 0xb0, 0x42, 0xf0, 0x14, 0xf5, 0xd2, 0x5f, 0x50, 0x2f, 0x89, 0x58, 0xbd,
	0x79, 0xd2, 0xab, 0x82, 0xe8, 0xcd, 0x5b, 0x9a, 0x0e, 0x31, 0xb4, 0x99, 0x89, 0x49, 0xda, 0xa5,
	0xb0, 0x3f, 0x7e, 0xd9, 0xec, 0x16, 0x76, 0x97, 0x1e, 0xe7, 0xe3, 0x3d, 0x98, 0xc7, 0x1e, 0x7c,
	0x6f, 0x24, 0x42, 0xda, 0x50, 0xe8, 0xa5, 0x0f, 0x94, 0x48, 0xd3, 0x20, 0x23, 0x84, 0xc9, 0x6a,
	0x90, 0x7e, 0x50, 0x33, 0x04, 0x91, 0x9d, 0x5f, 0x1f, 0xb5, 0xaa, 0x57, 0x3b, 0x1d, 0x39, 0x65,
	0xf1, 0xac, 0xf2, 0xb4, 0x65, 0xe5, 0x57, 0xbe, 0xf9, 0x33, 0xbb, 0xfa, 0x20, 0x63, 0x91, 0xdf,
	0x89, 0x43, 0x50, 0xe4, 0xf3, 0x1b, 0xfe, 0x47, 0x88, 0xa9, 0xba, 0xbf, 0xd0, 0xe8, 0x09, 0x23,
	0xf0, 0x57, 0x76, 0xf3, 0x33, 0xa3, 0xfe, 0xa4, 0x09, 0x1c, 0x60, 0xe2, 0xb7, 0x4b, 0x6c, 0x2f,
	0xef, 0xe4, 0x9c, 0xc2, 0xae, 0x5a, 0xc3, 0xba, 0x78, 0x2c, 0xde, 0x5e, 0x7e, 0x1b, 0x63, 0xd3,
	0xdf, 0xd8, 0x0a, 0x4d, 0x4e, 0xa2, 0xd5, 0x7d, 0x1b, 0x66, 0x85, 0xd2, 0xd0, 0x44, 0x20, 0x4f,
	0x47, 0x98, 0xe0, 0xf5, 0x32, 0xba, 0x2d, 0xf3, 0xef, 0xcd, 0x2e, 0x00, 0x00, 0xff, 0xff, 0x63,
	0x7a, 0xd5, 0x9a, 0x1b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlayerClient is the client API for Player service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlayerClient interface {
	Login(ctx context.Context, in *domain.LoginRequest, opts ...grpc.CallOption) (*domain.LoginResponse, error)
	SyncMovement(ctx context.Context, opts ...grpc.CallOption) (Player_SyncMovementClient, error)
}

type playerClient struct {
	cc *grpc.ClientConn
}

func NewPlayerClient(cc *grpc.ClientConn) PlayerClient {
	return &playerClient{cc}
}

func (c *playerClient) Login(ctx context.Context, in *domain.LoginRequest, opts ...grpc.CallOption) (*domain.LoginResponse, error) {
	out := new(domain.LoginResponse)
	err := c.cc.Invoke(ctx, "/service.Player/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) SyncMovement(ctx context.Context, opts ...grpc.CallOption) (Player_SyncMovementClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Player_serviceDesc.Streams[0], "/service.Player/SyncMovement", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerSyncMovementClient{stream}
	return x, nil
}

type Player_SyncMovementClient interface {
	Send(*domain.MoveCommand) error
	Recv() (*domain.MoveCommand, error)
	grpc.ClientStream
}

type playerSyncMovementClient struct {
	grpc.ClientStream
}

func (x *playerSyncMovementClient) Send(m *domain.MoveCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *playerSyncMovementClient) Recv() (*domain.MoveCommand, error) {
	m := new(domain.MoveCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlayerServer is the server API for Player service.
type PlayerServer interface {
	Login(context.Context, *domain.LoginRequest) (*domain.LoginResponse, error)
	SyncMovement(Player_SyncMovementServer) error
}

// UnimplementedPlayerServer can be embedded to have forward compatible implementations.
type UnimplementedPlayerServer struct {
}

func (*UnimplementedPlayerServer) Login(ctx context.Context, req *domain.LoginRequest) (*domain.LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedPlayerServer) SyncMovement(srv Player_SyncMovementServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncMovement not implemented")
}

func RegisterPlayerServer(s *grpc.Server, srv PlayerServer) {
	s.RegisterService(&_Player_serviceDesc, srv)
}

func _Player_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Player/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Login(ctx, req.(*domain.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_SyncMovement_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlayerServer).SyncMovement(&playerSyncMovementServer{stream})
}

type Player_SyncMovementServer interface {
	Send(*domain.MoveCommand) error
	Recv() (*domain.MoveCommand, error)
	grpc.ServerStream
}

type playerSyncMovementServer struct {
	grpc.ServerStream
}

func (x *playerSyncMovementServer) Send(m *domain.MoveCommand) error {
	return x.ServerStream.SendMsg(m)
}

func (x *playerSyncMovementServer) Recv() (*domain.MoveCommand, error) {
	m := new(domain.MoveCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Player_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Player",
	HandlerType: (*PlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Player_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncMovement",
			Handler:       _Player_SyncMovement_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/network/protocol/service/player.proto",
}
